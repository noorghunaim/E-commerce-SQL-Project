--SQL Project
-- The code to create (or open) the database file as follows:
.open E_commerce.db
-- The code to create the table 1/5 "Users" which has the customer info as follows:
CREATE TABLE Users (user_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, Signup_date DATE);
-- The code to create the table 2/5 "Products" which has the items for sale as follows:
CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL, stock INTEGER);
-- The code to create the table 3/5 "Orders" which comprises the orders placed by users as follows:
CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_date DATE, total_amount REAL, FOREIGN KEY(order_id) REFERENCES Users(user_id));
-- The code to create the table 4/5 "OrderItems" which comprises the items placed by users in each order as follows:
CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY(order_id) REFERENCES Orders(order_id), FOREIGN KEY(product_id) REFERENCES Products(product_id));
-- The code to create the table 5/5 "Reviews" which comprises product reviews by the users as follows:
CREATE TABLE Reviews (review_id INTEGER PRIMARY KEY, user_id INTEGER, product_id INTEGER, rating INTEGER, comment TEXT, review_date DATE, FOREIGN KEY(user_id) REFERENCES Users(user_id), FOREIGN KEY(product_id) REFERENCES Products(product_id));
-- The code to show tables created as follows:
.tables
-- The code to populate the Users table is as follows:
INSERT INTO Users VALUES (1, 'Alice', 'Smith', 'alice@gmail.com','2025-01-15'),
...>(2,'Bob', 'Johnson', 'Bob@hotmail.com', '2025-02-20'),
...>(3, 'Charlie', 'Lee', 'Charlie@gmail.com', '2025-03-05');
-- The code to IGNORE or REPLACE in the Users table is as follows:
INSERT OR IGNORE INTO Users (user_id, first_name, last_name, email, signup_date) 
VALUES (1,'Alice','Smith','alice@gmail.com','2025-01-15'),
...>(2,'Bob','Johnson','bob@gmail.com','2025-02-20'),
...>(3,'Charlie','Lee','charlie@gmail.com','2025-03-05');
INSERT OR REPLACE INTO Users (user_id, first_name, last_name, email, signup_date)
VALUES(1,'Alice','Smith','alice@gmail.com','2025-01-15'),
...>(2,'Bob','Johnson','bob@gmail.com','2025-02-20'),
...>(3,'Charlie','Lee','charlie@gmail.com','2025-03-05');
-- The code to see Users table:
SELECT * FROM Users;
-- The code to populate the Products table is as follows:
INSERT INTO Products VALUES (1,'Laptop','Electronics',1200,10),
...> (2,'Smartphone','Electronics',800,20),
...> (3,'Coffee Maker','Home Appliances',150,15),
...> (4,'Headphone','Electronics',200,25);
-- The code to see Products table:
SELECT * FROM Products;
-- The code to populate the Orders table is as follows:
INSERT INTO Orders VALUES (1,1,'2025-04-01',1400),
...> (2,2,'2025-04-03',950),
...> (3,1,'2025-04-05',200);
-- The code to see Orders table:
SELECT * FROM Orders;
-- The code to populate the OrderItems table is as follows:
INSERT INTO OrderItems VALUES (1,1,1,1,1200),
...> (2,1,4,1,200),
...> (3,2,2,1,800),
...> (4,2,4,1,150),
...> (5,3,4,1,200);
-- The code to see OrderItems table:
SELECT * FROM OrderItems;
-- The code to populate the Reviews table is as follows:
INSERT INTO Reviews VALUES (1,1,1,5,'Great laptop','2025-04-02'),
...> (2,2,2,4,'Good phone','2025-04-04'),
...> (3,3,3,3,'Average coffee maker','2025-04-06');
-- The code to see Reviews table:
SELECT * FROM Reviews;
-- Basic Queries: 
-- List all users:
SELECT * FROM Users;
-- List all products in Electronics
SELECT * FROM Products WHERE category='Electronics';
-- Get all orders of user Alice
SELECT * FROM Orders WHERE user_id=1;
-- Joins Queries:
-- The code to get orders with product details:
SELECT o.order_id, u.first_name, p.name, oi.quantity, oi.price FROM Orders o JOIN Users u ON o.user_id = u.user_id, JOIN OrderItems oi ON o.order_id = oi.order_id, JOIN Products p ON oi.product_id = p.product_id;
-- The code to get average rating per product:
SELECT p.name, AVG(r.rating) as avg_rating FROM Reviews r JOIN Products p ON r.product_id=p.product_id GROUP BY p.product_id;
-- Aggregation Queries:
-- The code for Total sales per product:
SELECT p.name, SUM(oi.quantity * oi.price) as total_sales FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_id;
-- The code to get number of orders per user:
 SELECT u.first_name, COUNT(o.order_id) as orders_count FROM Orders o JOIN Users u ON o.user_id = u.user_id GROUP BY u.user_id;
-- The code for Products that have never been ordered:
SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM OrderItems);
-- The code for users who ordered more than once:
SELECT u.first_name, COUNT(o.order_id) as order_count FROM Orders o JOIN Users u ON o.user_id=u.user_id GROUP BY u.user_id HAVING order_count>1;
